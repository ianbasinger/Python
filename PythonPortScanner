## This is a function dedicated to scanning a IP address or given hostname for specific ports to see if they are open, think of like nmap
## You can scan 1 port, but you can also define a range of ports for it to loop through
## Meant for labbing or private environements only
## Common ports: 80 HTTP 443 HTTPS 53 DNS - these are often open by default

import socket
## Import socket requirement

def port_is_open(host, port, protocol):
  ## Port is open function
    if protocol == "tcp":
      ## If it's defined as TCP, then do:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    elif protocol == "udp":
      ## If it's UDP then do:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    else:
        raise ValueError("Invalid protocol specified. Must be 'tcp' or 'udp'.")
        ## If it's neither TCP or UDP, then it's invalid and won't work, throw an error

    sock.settimeout(5)
    ## Timeout
    result = sock.connect_ex((host, port))
    ## Start a connection to $host, $port
    sock.close()
    ## Close the connection
    return result == 0
    ## Return the value

def check_ports(host, start_port, end_port):
    protocols = ["tcp", "udp"]
    port_counter = 0
    for protocol in protocols:
        for port in range(start_port, end_port + 1):
            port_counter += 1
            if port_counter % 500 == 0:
                print("No open ports found in the last 500 ports.")
            if port_is_open(host, port, protocol):
                print(f"{protocol.upper()} port {port} is open on host {host}")


## Example usage
host = "127.0.0.1 aka EXAMPLE, but in any name.com or IP address here"
start_port = 1
end_port = 10000
check_ports(host, start_port, end_port)
## Calling the full function
